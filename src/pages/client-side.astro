---
import Layout from '../layouts/Layout.astro';

// This page is statically pre-rendered at build time
export const prerender = true;
---

<Layout title="Client-side Rendering Demo">
	<main>
		<h1>üíª Client-side Rendering Demo</h1>
		<p>This page demonstrates client-side JavaScript functionality in Astro with &lt;script&gt; tag.</p>
		
		<div class="info-box">
			<h2>‚ÑπÔ∏è Information</h2>
			<p><strong>Counter:</strong> 
				<button id="click-counter">Clicks: <span id="count">0</span></button>
				(Increments at runtime as JS is bundled with client side html and runs in browser, see console log in browser)</p>
			<p><strong>Time:</strong> Updates at runtime due to client side JS <p id="current-time"/> </p>
			<p><strong>Rendering Mode:</strong> Client Side Rendering</p>
			<p><strong>When Generated:</strong> At build time, JS is bundled at build time and executes in browser</p>
			<p><strong>Performance:</strong> Fastest - served as static HTML (All client-side JavaScript is automatically stripped out)</p>
		</div>
		
		<div class="info-box">
			<h2>‚ÑπÔ∏è About Client-side JavaScript in Astro</h2>
			<ul>
				<li><strong>Script tags:</strong> Regular JavaScript works in Astro pages</li>
				<li><strong>No build step required:</strong> Write vanilla JavaScript directly</li>
				<li><strong>Module scripts:</strong> Use ES6 modules with <code>&lt;script type="module"&gt;</code></li>
				<li><strong>Framework components:</strong> Use React/Svelte/Vue for complex interactions</li>
				<li><strong>Progressive enhancement:</strong> Start with HTML, add JavaScript as needed</li>
			</ul>
		</div>
		
		<a href="/" class="back-link">‚Üê Back to Home</a>
	</main>
</Layout>

<script>
	// Click counter
	let clickCount = 0;
	const counterButton = document.getElementById('click-counter');
	const countSpan = document.getElementById('count');
	
	counterButton?.addEventListener('click', () => {
		clickCount++;
		console.log(`Incrementing counter to ${clickCount} - Executing in browser`)
		if (countSpan) {
			countSpan.textContent = clickCount.toString();
		}
	});
	
	// Current time updater
	function updateTime() {
		const timeElement = document.getElementById('current-time');
		if (timeElement) {
			timeElement.textContent = new Date().toLocaleTimeString();
		}
	}
	
	// Update time every second
	setInterval(updateTime, 1000);
	updateTime(); // Initial call
	
	// Text input handler
	const textInput = document.getElementById('text-input') as HTMLInputElement;
	const textOutput = document.getElementById('text-output');
	
	textInput?.addEventListener('input', (e) => {
		const target = e.target as HTMLInputElement;
		if (textOutput) {
			textOutput.textContent = `You typed: ${target.value}`;
		}
	});
</script>
<style>
		main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: rgb(13, 2, 79);
		font-size: 20px;
		line-height: 1.6;
	}
	
	nav ul {
		list-style: none;
		padding: 0;
	}
	
	nav li {
		margin: 0.5rem 0;
	}
	
	nav a {
		color: #311d42;
		text-decoration: underline;
		padding: 0.5rem;
		border-radius: 4px;
		transition: background-color 0.3s;
	}
	
	nav a:hover {
		background-color: rgba(79, 57, 250, 0.1);
	}
	
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	
	h2 {
		color: #000000;
	}

	#codeBlock {
		display: inline-block;
		border-radius: 1px;
		border: 1px solid transparent;
		padding: 6px 8px;
		background-color:#dadada;
		width: 100%;
	}

	#click-counter {
		padding: 8px 16px;
		background-color: #61dafb;
		border: none;
		border-radius: 4px;
		cursor: pointer;
	}

	#current-time {
		display: inline;
	}
</style>