---
import Layout from '../layouts/Layout.astro';

// Simulate server error information
const errorTime = new Date().toISOString();
const errorId = Math.random().toString(36).substring(2, 15);
---

<Layout title="500 - Internal Server Error">
	<main>
		<div class="error-container">
			<h1>500 Internal Server Error ‚ö†Ô∏è</h1>
			<p class="error-message">
				Something went wrong on our end. We're working to fix this issue.
			</p>
			
			<div class="error-details">
				<p><strong>Error ID:</strong> <code>{errorId}</code></p>
				<p><strong>Timestamp:</strong> {errorTime}</p>
				<p><strong>Error Type:</strong> Internal Server Error</p>
				<p><strong>Status Code:</strong> 500</p>
			</div>
			
			<div class="what-happened">
				<h2>ü§î What happened?</h2>
				<p>
					A 500 Internal Server Error means something went wrong on the server side. 
					This could be due to:
				</p>
				<ul>
					<li>Server configuration issues</li>
					<li>Database connection problems</li>
					<li>Code execution errors</li>
					<li>Resource limitations</li>
					<li>Third-party service failures</li>
				</ul>
			</div>
			
			<div class="what-to-do">
				<h2>üîß What can you do?</h2>
				<div class="actions-grid">
					<div class="action-card">
						<h3>üîÑ Try Again</h3>
						<p>The issue might be temporary</p>
						<button onclick="window.location.reload()" class="action-button">
							Refresh Page
						</button>
					</div>
					
					<div class="action-card">
						<h3>üè† Go Home</h3>
						<p>Return to the main page</p>
						<a href="/" class="action-button">
							Go to Homepage
						</a>
					</div>
					
					<div class="action-card">
						<h3>‚è∞ Wait</h3>
						<p>Come back in a few minutes</p>
						<button onclick="setTimeout(() => window.location.reload(), 60000)" class="action-button">
							Auto-retry in 1min
						</button>
					</div>
				</div>
			</div>
			
			<div class="technical-info">
				<h2>üîç Technical Information</h2>
				<div class="tech-grid">
					<div class="tech-item">
						<strong>Server:</strong> Astro SSR
					</div>
					<div class="tech-item">
						<strong>Runtime:</strong> Node.js
					</div>
					<div class="tech-item">
						<strong>Error Code:</strong> HTTP 500
					</div>
					<div class="tech-item">
						<strong>Retry Safe:</strong> Yes
					</div>
				</div>
			</div>
			
			<div class="astro-ssr-info">
				<h2>üöÄ Astro SSR Error Handling</h2>
				<p>
					This 500 error page demonstrates server-side error handling in Astro. 
					In a production environment, you would:
				</p>
				<ul>
					<li>Log detailed error information for debugging</li>
					<li>Show user-friendly error messages</li>
					<li>Implement error monitoring and alerting</li>
					<li>Provide fallback content when possible</li>
					<li>Set up proper error boundaries</li>
				</ul>
			</div>
			
			<div class="error-prevention">
				<h2>üõ°Ô∏è Error Prevention</h2>
				<div class="prevention-grid">
					<div class="prevention-item">
						<h3>Monitoring</h3>
						<p>Implement comprehensive error monitoring and logging</p>
					</div>
					<div class="prevention-item">
						<h3>Testing</h3>
						<p>Thorough testing of server-side functionality</p>
					</div>
					<div class="prevention-item">
						<h3>Fallbacks</h3>
						<p>Graceful degradation and fallback mechanisms</p>
					</div>
					<div class="prevention-item">
						<h3>Health Checks</h3>
						<p>Regular health checks and automated recovery</p>
					</div>
				</div>
			</div>
			
			<div class="contact-info">
				<h3>üìû Need Help?</h3>
				<p>If this problem persists, please contact our support team with the error ID above.</p>
			</div>
		</div>
	</main>
</Layout>

<style>
		main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: rgb(13, 2, 79);
		font-size: 20px;
		line-height: 1.6;
	}
	
	nav ul {
		list-style: none;
		padding: 0;
	}
	
	nav li {
		margin: 0.5rem 0;
	}
	
	nav a {
		color: #311d42;
		text-decoration: underline;
		padding: 0.5rem;
		border-radius: 4px;
		transition: background-color 0.3s;
	}
	
	nav a:hover {
		background-color: rgba(79, 57, 250, 0.1);
	}
	
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	
	h2 {
		color: #000000;
	}

	#codeBlock {
		display: inline-block;
		border-radius: 1px;
		border: 1px solid transparent;
		padding: 6px 8px;
		background-color:#dadada;
		width: 100%;
	}

	#click-counter {
		padding: 8px 16px;
		background-color: #61dafb;
		border: none;
		border-radius: 4px;
		cursor: pointer;
	}

	#current-time {
		display: inline;
	}
</style>
