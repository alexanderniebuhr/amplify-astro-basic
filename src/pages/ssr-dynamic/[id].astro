---
import Layout from '../../layouts/Layout.astro';

// Enable server-side rendering for this dynamic route
export const prerender = false;

const { id } = Astro.params;
const requestTime = new Date().toISOString();
const randomNumber = Math.floor(Math.random() * 1000);

// Simulate fetching data based on the ID (this runs on each request)
const mockDatabase = {
	'example-id': { name: 'Example Item', category: 'Demo', price: 29.99 },
	'product-123': { name: 'Amazing Product', category: 'Electronics', price: 199.99 },
	'user-456': { name: 'John Doe', category: 'User Profile', price: null },
	'order-789': { name: 'Order #789', category: 'Order', price: 89.50 }
};

// Get item data or create a default one
const item = mockDatabase[id as keyof typeof mockDatabase] || {
	name: `Dynamic Item ${id}`,
	category: 'Unknown',
	price: Math.floor(Math.random() * 100)
};

// Simulate server-side processing time
const processingTime = Math.floor(Math.random() * 50) + 10; // 10-60ms

// Get request headers
const userAgent = Astro.request.headers.get('user-agent') || 'Unknown';
const referer = Astro.request.headers.get('referer') || 'Direct';
---

<Layout title={`SSR Dynamic: ${item.name}`}>
	<main>
		<h1>üîó SSR Dynamic Route</h1>
		<p>This page demonstrates Server-Side Rendering with dynamic routes. Each request is processed on the server.</p>
		
		<div class="item-info">
			<h2>üì¶ Item Details</h2>
			<p><strong>ID:</strong> {id}</p>
			<p><strong>Name:</strong> {item.name}</p>
			<p><strong>Category:</strong> {item.category}</p>
			{item.price && <p><strong>Price:</strong> ${item.price}</p>}
		</div>
		
		<div class="request-details">
			<h2>üîç Request Details</h2>
			<p><strong>Request Time:</strong> {requestTime}</p>
			<p><strong>Random Number:</strong> {randomNumber}</p>
			<p><strong>Processing Time:</strong> {processingTime}ms</p>
			<p><strong>User Agent:</strong> {userAgent.substring(0, 80)}...</p>
			<p><strong>Referer:</strong> {referer}</p>
		</div>
		
		<div class="test-routes">
			<h3>üß™ Test Different Routes</h3>
			<p>Try these different dynamic routes (each will be processed server-side):</p>
			<ul>
				<li><a href="/ssr-dynamic/example-id">example-id</a></li>
				<li><a href="/ssr-dynamic/product-123">product-123</a></li>
				<li><a href="/ssr-dynamic/user-456">user-456</a></li>
				<li><a href="/ssr-dynamic/order-789">order-789</a></li>
				<li><a href="/ssr-dynamic/random-item">random-item</a></li>
			</ul>
		</div>
		
		<div class="refresh-demo">
			<h3>üîÑ Server Processing Demo</h3>
			<p>Refresh this page to see server-side values change on each request:</p>
			<button onclick="window.location.reload()" class="refresh-button">
				Refresh Page
			</button>
		</div>
		
		<div class="info-box">
			<h2>‚ÑπÔ∏è SSR Dynamic Route Features</h2>
			<ul>
				<li><strong>Server processing:</strong> Each request is handled by the server</li>
				<li><strong>Dynamic parameters:</strong> Route parameters available via Astro.params</li>
				<li><strong>Real-time data:</strong> Can fetch fresh data from databases/APIs</li>
				<li><strong>Request context:</strong> Access to headers, cookies, and request details</li>
				<li><strong>Personalization:</strong> Can customize content based on user/request</li>
				<li><strong>No pre-generation:</strong> Routes don't need to be known at build time</li>
			</ul>
		</div>
		
		<a href="/" class="back-link">‚Üê Back to Home</a>
	</main>
</Layout>

<style>
		main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: rgb(13, 2, 79);
		font-size: 20px;
		line-height: 1.6;
	}
	
	nav ul {
		list-style: none;
		padding: 0;
	}
	
	nav li {
		margin: 0.5rem 0;
	}
	
	nav a {
		color: #311d42;
		text-decoration: underline;
		padding: 0.5rem;
		border-radius: 4px;
		transition: background-color 0.3s;
	}
	
	nav a:hover {
		background-color: rgba(79, 57, 250, 0.1);
	}
	
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	
	h2 {
		color: #000000;
	}

	#codeBlock {
		display: inline-block;
		border-radius: 1px;
		border: 1px solid transparent;
		padding: 6px 8px;
		background-color:#dadada;
		width: 100%;
	}

	#click-counter {
		padding: 8px 16px;
		background-color: #61dafb;
		border: none;
		border-radius: 4px;
		cursor: pointer;
	}

	#current-time {
		display: inline;
	}
</style>
